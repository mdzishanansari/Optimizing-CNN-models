# -*- coding: utf-8 -*-
"""Building & Optimizing CNN model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YpRAH-Xe8qD0J-jNFSTfec3AtGCX2bXr

#### Keras Tuner is used for optimizing the CNN Model
"""

!pip install keras-tuner --upgrade

import tensorflow as tf
from tensorflow import keras
import numpy as np
import pandas as pd

print(tf.__version__)

!python --version

fashion_mnist = keras.datasets.fashion_mnist

(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

# Scaling down the images

train_images = train_images/255.0
test_images = test_images/255.0

train_images[0].shape

train_images = train_images.reshape(len(train_images), 28, 28, 1)
test_images = test_images.reshape(len(test_images), 28, 28, 1)

def build_model(hp):
  model = keras.Sequential([
                            keras.layers.Conv2D(
                                filters = hp.Int('conv_1_filter', min_value = 64, max_value = 128, step = 16),
                                kernel_size = hp.Choice('conv_1_kernel', values = [3,5]),
                                activation = 'relu',
                                input_shape = (28, 28, 1)
                            ),

                            keras.layers.Conv2D(
                                filters = hp.Int('conv_2_filetr', min_value = 32, max_value = 64, step = 16),
                                kernel_size = hp.Choice('conv_2_kernel', values = [3,5]),
                                activation = 'relu'
                            ),

                            keras.layers.Flatten(),
                            keras.layers.Dense(
                                units = hp.Int('dense_1_units', min_value = 32, max_value = 128, step = 16),
                                activation = 'relu'
                            ),

                            keras.layers.Dense(10, activation = 'softmax')
  ])

  model.compile(optimizer = keras.optimizers.Adam(hp.Choice('learning_rate', values = [1e-2, 1e-3])),
                                                  loss = 'sparse_categorical_crossentropy',
                metrics = ['accuracy'])
  return model

import keras_tuner as kt
from tensorflow import keras

from kerastuner import RandomSearch
from kerastuner.engine.hyperparameters import HyperParameters

tuner_search = RandomSearch(build_model, objective = 'val_accuracy', max_trials=5, directory='output', project_name='Fashion Mnist')

tuner_search.search(train_images, train_labels, epochs=3, validation_split=0.15)

model = tuner_search.get_best_models(num_models=1)[0]

model.summary()

model.fit(train_images, train_labels, epochs=10, validation_split=0.15, initial_epoch=3)







Import pandas as pd





